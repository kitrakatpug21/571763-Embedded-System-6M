
Basics of Microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e9  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000560  00000000  00000000  00000781  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fa  00000000  00000000  00000ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fd  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001251  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main(void)
{
	// PA    76543210
	DDRA = 0b11111111;// I setup all Pins on PORTA as OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	while (1)
	{
		PORTA = 0b11001100;// I Setup PA7,6,3,2 as +5V and PA5,4,1,0 as 0V
  70:	8c ec       	ldi	r24, 0xCC	; 204
  72:	8b bb       	out	0x1b, r24	; 27
		for (long i = 0; i < 100000; i = i + 1)
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	dc 01       	movw	r26, r24
  7a:	03 c0       	rjmp	.+6      	; 0x82 <main+0x16>
  7c:	01 96       	adiw	r24, 0x01	; 1
  7e:	a1 1d       	adc	r26, r1
  80:	b1 1d       	adc	r27, r1
  82:	80 3a       	cpi	r24, 0xA0	; 160
  84:	26 e8       	ldi	r18, 0x86	; 134
  86:	92 07       	cpc	r25, r18
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a2 07       	cpc	r26, r18
  8c:	b1 05       	cpc	r27, r1
  8e:	b4 f3       	brlt	.-20     	; 0x7c <main+0x10>
		{		};
		PORTA = 0b00110011;
  90:	83 e3       	ldi	r24, 0x33	; 51
  92:	8b bb       	out	0x1b, r24	; 27
		for (long i = 0; i < 100000; i = i + 1)
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	dc 01       	movw	r26, r24
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <main+0x36>
  9c:	01 96       	adiw	r24, 0x01	; 1
  9e:	a1 1d       	adc	r26, r1
  a0:	b1 1d       	adc	r27, r1
  a2:	80 3a       	cpi	r24, 0xA0	; 160
  a4:	26 e8       	ldi	r18, 0x86	; 134
  a6:	92 07       	cpc	r25, r18
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a2 07       	cpc	r26, r18
  ac:	b1 05       	cpc	r27, r1
  ae:	b4 f3       	brlt	.-20     	; 0x9c <main+0x30>
  b0:	df cf       	rjmp	.-66     	; 0x70 <main+0x4>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
