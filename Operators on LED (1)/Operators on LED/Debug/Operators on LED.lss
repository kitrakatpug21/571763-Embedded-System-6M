
Operators on LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000605  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056f  00000000  00000000  000007b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000210  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000054  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    // PA    76543210
    DDRA = 0b11111111;// I setup all Pins on PORTA as OUTPUT
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
    while (1)
    {
		PORTA = 0b00000000;
  70:	1b ba       	out	0x1b, r1	; 27
		for (long i = 0; i < 25000; i = i + 1)
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	dc 01       	movw	r26, r24
  78:	03 c0       	rjmp	.+6      	; 0x80 <main+0x14>
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	a1 1d       	adc	r26, r1
  7e:	b1 1d       	adc	r27, r1
  80:	88 3a       	cpi	r24, 0xA8	; 168
  82:	21 e6       	ldi	r18, 0x61	; 97
  84:	92 07       	cpc	r25, r18
  86:	a1 05       	cpc	r26, r1
  88:	b1 05       	cpc	r27, r1
  8a:	bc f3       	brlt	.-18     	; 0x7a <main+0xe>
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	18 c0       	rjmp	.+48     	; 0xc2 <main+0x56>
		{}
		for (int led = 0; led <= 7; led = led + 1)
		{
			PORTA = (0b10000000 >> led);
  92:	80 e8       	ldi	r24, 0x80	; 128
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	02 2e       	mov	r0, r18
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
  9a:	95 95       	asr	r25
  9c:	87 95       	ror	r24
  9e:	0a 94       	dec	r0
  a0:	e2 f7       	brpl	.-8      	; 0x9a <main+0x2e>
  a2:	8b bb       	out	0x1b, r24	; 27
			for (long i = 0; i < 25000; i = i + 1)
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	dc 01       	movw	r26, r24
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <main+0x46>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	a1 1d       	adc	r26, r1
  b0:	b1 1d       	adc	r27, r1
  b2:	88 3a       	cpi	r24, 0xA8	; 168
  b4:	41 e6       	ldi	r20, 0x61	; 97
  b6:	94 07       	cpc	r25, r20
  b8:	a1 05       	cpc	r26, r1
  ba:	b1 05       	cpc	r27, r1
  bc:	bc f3       	brlt	.-18     	; 0xac <main+0x40>
    while (1)
    {
		PORTA = 0b00000000;
		for (long i = 0; i < 25000; i = i + 1)
		{}
		for (int led = 0; led <= 7; led = led + 1)
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	28 30       	cpi	r18, 0x08	; 8
  c4:	31 05       	cpc	r19, r1
  c6:	2c f3       	brlt	.-54     	; 0x92 <main+0x26>
  c8:	d3 cf       	rjmp	.-90     	; 0x70 <main+0x4>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
