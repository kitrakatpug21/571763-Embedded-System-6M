
Switch Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d6  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f5  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042b  00000000  00000000  000011d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c8  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	}
}

int main(void)
{
    DDRA = 0b11111111; // PORTA is OUTPUT for LEDs
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000000; // PORTC is an Input Port for Switch
  70:	14 ba       	out	0x14, r1	; 20
	while (1) 
    {
		//PORTA = (PINC == 8) ? 0b11111111 : 0b00000000;
		
		if (PINC == 136)
  72:	83 b3       	in	r24, 0x13	; 19
  74:	88 38       	cpi	r24, 0x88	; 136
  76:	b1 f4       	brne	.+44     	; 0xa4 <main+0x38>
		{
			PORTA = 0b11111111;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	80 e7       	ldi	r24, 0x70	; 112
  80:	92 e0       	ldi	r25, 0x02	; 2
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
			_delay_ms(100);
			PORTA = 0b00000000;
  8e:	1b ba       	out	0x1b, r1	; 27
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
  a2:	e7 cf       	rjmp	.-50     	; 0x72 <main+0x6>
			_delay_ms(100);
		}
		else if (PINC == 128)
  a4:	83 b3       	in	r24, 0x13	; 19
  a6:	80 38       	cpi	r24, 0x80	; 128
  a8:	b9 f4       	brne	.+46     	; 0xd8 <main+0x6c>
		{
			PORTA = 0b11110000;
  aa:	80 ef       	ldi	r24, 0xF0	; 240
  ac:	8b bb       	out	0x1b, r24	; 27
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	80 e7       	ldi	r24, 0x70	; 112
  b2:	92 e0       	ldi	r25, 0x02	; 2
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x48>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x52>
  be:	00 00       	nop
			_delay_ms(100);
			PORTA = 0b11111111;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	80 e7       	ldi	r24, 0x70	; 112
  c8:	92 e0       	ldi	r25, 0x02	; 2
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
  d6:	cd cf       	rjmp	.-102    	; 0x72 <main+0x6>
			_delay_ms(100);
		}
		else if (PINC == 8)
  d8:	83 b3       	in	r24, 0x13	; 19
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	b9 f4       	brne	.+46     	; 0x10c <main+0xa0>
		{
			PORTA = 0b00001111;
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x7c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x86>
  f2:	00 00       	nop
			_delay_ms(100);
			PORTA = 0b11111111;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8b bb       	out	0x1b, r24	; 27
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	80 e7       	ldi	r24, 0x70	; 112
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x92>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x9c>
 108:	00 00       	nop
 10a:	b3 cf       	rjmp	.-154    	; 0x72 <main+0x6>
			_delay_ms(100);
		}
		else
		{
			PORTA = 0b11111111;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8b bb       	out	0x1b, r24	; 27
 110:	b0 cf       	rjmp	.-160    	; 0x72 <main+0x6>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
